package main

import (
	"fmt"
)

func main() {
	ar := []int{3, 4, 1, 2, 5, 7, -1, 0}
	Quicksort(ar)
	fmt.Println(ar)
}

func Quicksort(ar []int) {
	// это условие выхода из функции. Пока длина массива не будет равна 1
	// функция будет делить массив на части и снова вызывать саму себя (рекурсия)
	if len(ar) <= 1 {
		return
	}
	// находим следующий индекс элемента, по которому делим массив на 2 части
	split := partition(ar)

	Quicksort(ar[:split])
	Quicksort(ar[split:])
}

func partition(ar []int) int {
	// находим элемент, относительно которого будем сортировать весь остальной массив.
	// Все элементы, которые меньше пивота (опорной точки),
	//должны быть слева, те что больше-справа
	pivot := ar[len(ar)/2]

	left := 0
	right := len(ar) - 1

	for {
		// идем с начала массива и ищем первый элемент,
		// не удовлетворяющий тому, что он должен быть меньше пивота
		for ; ar[left] < pivot; left++ {
		}
		// идем с конца массива и ищем первый элемент,
		// не удовлетворяющий тому, что он должен быть больше пивота
		for ; ar[right] > pivot; right-- {
		}

		if left >= right {
			return right
		}
		// Если нашли элементы, которые стоят не на своих позициях
		//(тот элемент, что должен быть справа - находится слева и наоборот)
		// меняем их местами
		swap(ar, left, right)
	}
}

func swap(ar []int, i, j int) {
	tmp := ar[i]
	ar[i] = ar[j]
	ar[j] = tmp
}
